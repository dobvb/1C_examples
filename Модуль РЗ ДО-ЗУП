// Инициируется регламентным заданием "Обмен с ЗУП".
//
Процедура ВыполнитьОбменВнешняяОбработка() Экспорт
	//Код во внешней обработке удобнее редактировать на ходу, но сложнее отслеживать качество - оставили в общих модулях
	
	//СсылкаОбработка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("МетодыДляУниверсальногоВС");
	//ОбъектМодуль = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработка);
	//ОбъектМодуль.ВыполнитьОбмен();
	ВыполнитьОбмен();
КонецПроцедуры                

// Подключается к веб-сервису и вызываем процедуры.
//
Процедура ВыполнитьОбмен() 

	ПараметрыПодключения = ИнициализироватьПараметрыПодключения("ZUP");
	Прокси = ПодключениеКВебСервису(ПараметрыПодключения);  
	Если Прокси = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторКомандыОбработки = "ПолучитьТаблицуРуководителейПодразделений"; 
	ПараметрыКомандыОбработки = Новый Структура("ИННОрганизации, ДатаФормирования", "7536097029", ТекущаяДата());
	
	ТаблицаДанных = ПолучитьДанныеИзСервиса(Прокси, ИдентификаторКомандыОбработки, ПараметрыКомандыОбработки);
	ОбновитьСоставРолейРуководителей(ТаблицаДанных.ВозвращаемоеЗначение);

	ИдентификаторКомандыОбработки = "ПолучитьТаблицуКадровойИнформации"; 
	ПараметрыКомандыОбработки = Новый Структура();
	
	ТаблицаДанных = ПолучитьДанныеИзСервиса(Прокси, ИдентификаторКомандыОбработки, ПараметрыКомандыОбработки);
	ОбновитьРССведенияОПользователяхДокументооборот(ТаблицаДанных.ВозвращаемоеЗначение);
КонецПроцедуры	                                    

// Обновляет данные по ролям руководителей в РС "Исполнители ролей" на разницу с переданной таблицей.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений	 - Таблица, возвращенная веб-сервисом.
//
Процедура ОбновитьСоставРолейРуководителей(ТаблицаДанных)
	ТаблицаДанных.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДанных.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.Пользователи")) ;
	ТаблицаДанных.Колонки.Добавить("РольРуководителя",Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли"));
	Для Каждого Строчка Из ТаблицаДанных Цикл  
		Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(Строчка.ПодразделениеГУИД));
		Если Подразделение.ПолучитьОбъект() = Неопределено Тогда
			//Объект подразделение не найден, роль нет смысла задавать без привязки к подразделению
			Строчка.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Строчка.РольРуководителя = Справочники.РолиИсполнителей.ПустаяСсылка();
			ЗаписьЖурналаРегистрации("УМ_Обмены.ОбновитьСоставРолейРуководителей", 
			        УровеньЖурналаРегистрации.Ошибка, , ,
			        "Не найдено подразделение " + Строчка.ПодразделениеНаименование);
		Иначе
			Строчка.Подразделение = Подразделение;
			Строчка.РольРуководителя = Подразделение.РуководительОргструктуры;
		КонецЕсли;
	КонецЦикла;      
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ТаблицаДанных.Подразделение КАК Подразделение,
					|	ТаблицаДанных.ПодразделениеГУИД КАК ПодразделениеГУИД,
					|	ТаблицаДанных.ПодразделениеНаименование КАК ПодразделениеНаименование,
					|	ТаблицаДанных.Сотрудник КАК Сотрудник,
					|	ТаблицаДанных.РольРуководителя КАК РольРуководителя,
					|	ТаблицаДанных.РуководительСотрудник КАК НаименованиеРуководителя,
					|	ТаблицаДанных.РуководительКодСтрокой КАК ТабНомерРуководителя,
					|	ТаблицаДанных.РольИсполнителяСтрокой КАК НаименованиеРоли
					|ПОМЕСТИТЬ ТаблицаДанных
					|ИЗ
					|	&ТаблицаДанных КАК ТаблицаДанных
					|ГДЕ
					|	НЕ ТаблицаДанных.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаДанных.Подразделение КАК Подразделение,
					|	ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Сотрудник,
					|	ТаблицаДанных.РольРуководителя КАК РольРуководителя
					|ПОМЕСТИТЬ РолиИсполнители
					|ИЗ
					|	ТаблицаДанных КАК ТаблицаДанных
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
					|		ПО ТаблицаДанных.НаименованиеРуководителя = Пользователи.Наименование
					|			И ТаблицаДанных.ТабНомерРуководителя = Пользователи.ТабельныйНомер
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ТаблицаДанных.Подразделение,
					|	СтруктураПредприятияДополнительныеРуководители.Руководитель,
					|	ТаблицаДанных.РольРуководителя
					|ИЗ
					|	Справочник.СтруктураПредприятия.ДополнительныеРуководители КАК СтруктураПредприятияДополнительныеРуководители
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
					|		ПО (СтруктураПредприятия.Ссылка = СтруктураПредприятияДополнительныеРуководители.Ссылка)
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанных КАК ТаблицаДанных
					|		ПО (СтруктураПредприятия.РуководительОргструктуры = ТаблицаДанных.РольРуководителя)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	РолиИсполнители.РольРуководителя КАК РольРуководителя
					|ПОМЕСТИТЬ ИзмененныеРоли
					|ИЗ
					|	РолиИсполнители КАК РолиИсполнители
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
					|		ПО РолиИсполнители.РольРуководителя = ИсполнителиЗадач.РольИсполнителя
					|			И РолиИсполнители.Сотрудник = ИсполнителиЗадач.Исполнитель
					|ГДЕ
					|	ИсполнителиЗадач.Исполнитель ЕСТЬ NULL
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ИсполнителиЗадач.РольИсполнителя
					|ИЗ
					|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
					|		ЛЕВОЕ СОЕДИНЕНИЕ РолиИсполнители КАК РолиИсполнители
					|		ПО (РолиИсполнители.РольРуководителя = ИсполнителиЗадач.РольИсполнителя)
					|			И (РолиИсполнители.Сотрудник = ИсполнителиЗадач.Исполнитель)
					|ГДЕ
					|	РолиИсполнители.Сотрудник ЕСТЬ NULL
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	РолиИсполнители.РольРуководителя КАК РольРуководителя,
					|	РолиИсполнители.Сотрудник КАК Сотрудник
					|ИЗ
					|	РолиИсполнители КАК РолиИсполнители
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеРоли КАК ИзмененныеРоли
					|		ПО РолиИсполнители.РольРуководителя = ИзмененныеРоли.РольРуководителя
					|ИТОГИ ПО
					|	РольРуководителя";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРольРуководителя = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРольРуководителя.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РольИсполнителя.Установить(ВыборкаРольРуководителя.РольРуководителя); 
	    НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Выборка = ВыборкаРольРуководителя.Выбрать();
	
		Пока Выборка.Следующий() Цикл 
			Если Не Выборка.Сотрудник = Справочники.Пользователи.ПустаяСсылка() Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РольИсполнителя = Выборка.РольРуководителя;
				НоваяЗапись.Исполнитель = Выборка.Сотрудник;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные по кадровой информации в РС "Сведения о пользователях документооборот" на разницу с переданной таблицей.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений	 - Таблица, возвращенная веб-сервисом.
//
Процедура ОбновитьРССведенияОПользователяхДокументооборот(ТаблицаДанных)

	ТаблицаДанных.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДанных.Колонки.Добавить("Пользователь",Новый ОписаниеТипов("СправочникСсылка.Пользователи")) ;
	ТаблицаДанных.Колонки.Добавить("Должность",Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаДанных.Колонки.Добавить("ГрафикРаботы",Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботы"));

	Для Каждого Строчка Из ТаблицаДанных Цикл  
		Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(Строчка.ПодразделениеГУИД));
		Если Подразделение.ПолучитьОбъект() = Неопределено Тогда
			//Объект подразделение не найден по УИД, а он обязателен в регистре сведений, запись битая, выкидываем
			Строчка.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
			ЗаписьЖурналаРегистрации("УМ_Обмены.ОбновитьРССведенияОПользователяхДокументооборот", 
			        УровеньЖурналаРегистрации.Ошибка, , ,
			        "Не найдено подразделение " + Строчка.ПодразделениеНаименование);
		Иначе
			Строчка.Подразделение = Подразделение;
			Строчка.Должность = Справочники.Должности.ПолучитьСсылку(Новый УникальныйИдентификатор(Строчка.ДолжностьГУИД));
		КонецЕсли;
	КонецЦикла;   

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Подразделение КАК Подразделение,
	               |	ТаблицаДанных.Должность КАК Должность,
	               |	ТаблицаДанных.ГрафикНаименование КАК ГрафикНаименование,
	               |	ТаблицаДанных.СотрудникКод КАК ТабельныйНомер,
	               |	ТаблицаДанных.СотрудникНаименование КАК СотрудникНаименование
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |ГДЕ
	               |	НЕ ТаблицаДанных.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Подразделение КАК Подразделение,
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	ТаблицаДанных.Должность КАК Должность,
	               |	ГрафикиРаботы.Ссылка КАК ГрафикРаботы
	               |ПОМЕСТИТЬ ПолнаяВыборка
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО ТаблицаДанных.СотрудникНаименование = Пользователи.Наименование
	               |			И ТаблицаДанных.ТабельныйНомер = Пользователи.ТабельныйНомер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы КАК ГрафикиРаботы
	               |		ПО ТаблицаДанных.ГрафикНаименование = ГрафикиРаботы.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПолнаяВыборка.Подразделение КАК Подразделение,
	               |	ПолнаяВыборка.Пользователь КАК Пользователь,
	               |	ПолнаяВыборка.Должность КАК Должность,
	               |	ПолнаяВыборка.ГрафикРаботы КАК ГрафикРаботы
	               |ИЗ
	               |	ПолнаяВыборка КАК ПолнаяВыборка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
	               |		ПО ПолнаяВыборка.Подразделение = СведенияОПользователяхДокументооборот.Подразделение
	               |			И ПолнаяВыборка.Пользователь = СведенияОПользователяхДокументооборот.Пользователь
	               |			И ПолнаяВыборка.Должность = СведенияОПользователяхДокументооборот.Должность
	               |			И ПолнаяВыборка.ГрафикРаботы = СведенияОПользователяхДокументооборот.ГрафикРаботы
	               |ГДЕ
	               |	СведенияОПользователяхДокументооборот.Пользователь ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	Пользователь";
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПользователь = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПользователь.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователь.Пользователь); 
	    НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Выборка = ВыборкаПользователь.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает объект WSПрокси для работы с веб-сервисом
//
// Параметры:
//  ПараметрыПодключения - Структура - Структура параметров подключения.
// Возвращаемое значение:
//  WSПрокси - инициализированное подключение или Неопределено в случае ошибки.
//
Функция ПодключениеКВебСервису(ПараметрыПодключения) Экспорт
	
	Попытка
		Определение = Новый WSОпределения(?(Прав(СокрЛП(ПараметрыПодключения.АдресСервера),1) = "/", ПараметрыПодключения.АдресСервера, ПараметрыПодключения.АдресСервера+"/")+"ws/"+ПараметрыПодключения.ИмяФайлаПубликации+"?wsdl", ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);
	Исключение
		Определение = Неопределено;
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;
	
	Если Определение = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Интеграция с универсальным веб-сервисом 1С:ЗУП';
					|en = 'Integration with universal web-server 1C:HRM'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);		
		Возврат Неопределено;
	КонецЕсли;

	Прокси = Новый WSПрокси(Определение, ПараметрыПодключения.URIПространстваИмен, ПараметрыПодключения.ИмяСервиса, ПараметрыПодключения.ИмяСервиса+"Soap");
	Прокси.Пользователь = ПараметрыПодключения.Пользователь;
	Прокси.Пароль = ПараметрыПодключения.Пароль;
	Возврат Прокси;
	
КонецФункции

// Запрос в внешнюю систему
//
// Параметры:
//  Прокси - WSПрокси - WSПрокси.
//  ИдентификаторКомандыОбработки - Строка - Идентификатор команды, вызываемой на веб-сервисе
//  ПараметрыКомандыОбработки - Структура - Параметры, передаваемые команде
// Возвращаемое значение:
//  Структура - ответ от веб-сервиса.
//
Функция ПолучитьДанныеИзСервиса(Прокси, ИдентификаторКомандыОбработки, ПараметрыКомандыОбработки) Экспорт

	Ответ = Прокси.ExecuteFunction(ОбщегоНазначения.ЗначениеВСтрокуXML(ИдентификаторКомандыОбработки), ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыКомандыОбработки));
	ЗначениеОтвет = ОбщегоНазначения.ЗначениеИзСтрокиXML(Ответ);

	Возврат ЗначениеОтвет;

КонецФункции

Функция ИнициализироватьПараметрыПодключения(ВнешняяСистема) Экспорт

	ПараметрыПодключения = Новый Структура("АдресСервера, ИмяСервиса, URIПространстваИмен, ИмяФайлаПубликации, Пользователь, Пароль" );

	//Инициализация параметров подключения     
	
	Возврат ПараметрыПодключения;
	
КонецФункции
